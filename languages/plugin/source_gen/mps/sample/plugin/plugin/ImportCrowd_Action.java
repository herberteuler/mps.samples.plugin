package mps.sample.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.io.File;
import javax.swing.JFrame;
import javax.swing.JFileChooser;
import java.io.BufferedReader;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.FileInputStream;
import java.io.InputStreamReader;

public class ImportCrowd_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(ImportCrowd_Action.class);

  private SModel mdl;
  private SModelDescriptor model;

  public ImportCrowd_Action() {
    super("ImportCrowd", "Imports a crowd from a file", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }

  @NotNull()
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull() AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "ImportCrowd", t);
      this.disable(event.getPresentation());
    }
  }

  @Override()
  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    if (event.getData(MPSDataKeys.MODEL) == null) {
      return false;
    }
    this.mdl = event.getData(MPSDataKeys.MODEL).getSModel();
    if (this.mdl == null) {
      return false;
    }
    this.model = event.getData(MPSDataKeys.CONTEXT_MODEL);
    if (this.model == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull() final AnActionEvent event) {
    try {
      final Wrappers._T<SNode> node = new Wrappers._T<SNode>();

      //  get the crowd to be re-filled
      ModelAccess.instance().runReadAction(new Runnable() {

        public void run() {
          node.value = ListSequence.fromList(SModelOperations.getRoots(ImportCrowd_Action.this.mdl, "mps.sample.plugin.structure.Crowd")).first();
        }
      });
      //  first clean up old nodes
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {

        public void run() {
          SLinkOperations.removeAllChildren(node.value, "member");
        }
      });
      LOG.info("Old nodes removed");

      //  then read the contents of the file
      ImportCrowd_Action.this.readFile(node.value);
      LOG.info("Update completed");
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "ImportCrowd", t);
    }
  }

  /* package */File getFile() {
    JFrame jFrame = new JFrame("FileChooserDemo");
    jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    jFrame.pack();
    jFrame.setVisible(true);
    JFileChooser fileChooser = new JFileChooser();
    int returnVal = fileChooser.showOpenDialog(jFrame);
    File selectedFile = null;
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      selectedFile = fileChooser.getSelectedFile();
    }
    jFrame.setVisible(false);
    return selectedFile;
  }

  private void readLine(BufferedReader reader, final SNode node) {
    try {
      String line = reader.readLine();
      final String[] columns = line.split(",");

      ModelAccess.instance().runWriteActionInCommand(new Runnable() {

        public void run() {
          SNode newPerson = SModelOperations.createNewNode(ImportCrowd_Action.this.mdl, "mps.sample.plugin.structure.Person", null);
          SPropertyOperations.set(newPerson, "name", columns[0].trim());
          SPropertyOperations.set(newPerson, "street", columns[1].trim());
          SPropertyOperations.set(newPerson, "number", columns[2].trim());
          SPropertyOperations.set(newPerson, "zip", columns[3].trim());
          SPropertyOperations.set(newPerson, "city", columns[4].trim());
          SLinkOperations.addChild(node, "member", newPerson);
        }
      });
    } catch (Exception e) {
      LOG.error("Could not read a line", e);
    }
  }

  private void readFile(SNode node) {
    //  seems to be an MPS bug: although the Exception is thrown here, the generated Java method does not
    //  get the throws Exception
    try {
      File selectedFile = ImportCrowd_Action.this.getFile();
      FileInputStream fis = new FileInputStream(selectedFile);
      BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
      while (reader.ready()) {
        ImportCrowd_Action.this.readLine(reader, node);
      }
      reader.close();
      fis.close();
    } catch (Exception e) {
      LOG.error("Problems on reading the file", e);
    }
  }

}
